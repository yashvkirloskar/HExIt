import numpy as np
from MCTS import MCTS
from Apprentice import Apprentice
from MCTS_utils import board_from_channels
import shutil
import time

def printActionDistribution(ad):
    for a in ad:
        if str(a)[0] == '-':
            print("%.2f" %(a * -1), " ", end='')
        else:
            print("%.2f" %a, " ", end='')
    print()


# Create data batch, feed it to apprentice, train, then predict, make sure shapes are correct

def testBasicIntegration(batch_size=3, game_size=5, simulations_per_state=500):
    start = time.time()
    print("Testing basic Integration with batch_size = ", batch_size, ", simulations_per_state = ", simulations_per_state)

    num_actions = game_size**2

    mcts = MCTS(size=game_size, batch_size=batch_size, simulations_per_state=simulations_per_state, max_depth=4, apprentice=None)
    train_inputs, train_labels = mcts.generateExpertBatch()

    apprentice = Apprentice(name="test_basic_integration", board_size=5, batch_size=batch_size)
    # not sure what mask does
    apprentice.train(train_inputs, train_labels) # broken

    # once train works, add a line to call apprentice.predict, and examine output shape.
    test_states, test_labels = mcts.generateExpertBatch()
    predicted_labels = apprentice.predict(test_states)[0] # [0] is because predict returns a singleton list

    assert(predicted_labels.shape == (2, batch_size, num_actions))

    # compare the apprentice-predicted output with the expert-generated output
    # we dont expect them to match too well after such little training, but just examine a few

    print("White to move:")
    print(board_from_channels(test_states[0]))
    print("Expert-Generated White Distribution for this state:")
    printActionDistribution(test_labels[0])
    print("Apprentice-Predicted White Distribution for this state:")
    printActionDistribution(predicted_labels[0][0])
    print("hopefully the distributions match")

    print("Black to move:")
    print(board_from_channels(test_states[batch_size]))
    print("Expert-Generated Black Distribution for this state:")
    printActionDistribution(test_labels[batch_size])
    print("Apprentice-Predicted White Distribution for this state:")
    printActionDistribution(predicted_labels[1][0])
    print("hopefully the distributions match")

    shutil.rmtree("test_basic_integration")
    end = time.time()
    print("Basic Integration test passed! Took", end - start, "seconds\n\n")


def testMultipleIterations(num_iterations=3, batch_size=3, game_size=5, simulations_per_state=500):
    start = time.time()
    print("Testing", num_iterations, "iterations of Integration with batch_size = ", batch_size, ", simulations_per_state = ", simulations_per_state)

    num_actions = game_size ** 2

    mcts_initial = MCTS(size=game_size, batch_size=batch_size, simulations_per_state=simulations_per_state, max_depth=4, apprentice=None)
    apprentice = Apprentice(name="test_multiple_integration", board_size=5, batch_size=batch_size)
    mcts_assisted = MCTS(size=game_size, batch_size=batch_size, simulations_per_state=500, max_depth=4, apprentice=apprentice)

    # first round of expert
    train_inputs, train_labels = mcts_initial.generateExpertBatch()
    # first round of apprentice
    apprentice.train(train_inputs, train_labels)

    for i in range(1, num_iterations):
        train_inputs, train_labels = mcts_assisted.generateExpertBatch()
        apprentice.train(train_inputs, train_labels)

    # test our apprentice against the action distribution generated by the base (no apprentice help) MCTS
    test_states, test_labels = mcts.generateExpertBatch()
    predicted_labels = apprentice.predict(test_states)[0]
    assert(predicted_labels.shape == (2, batch_size, num_actions))

    # compare the apprentice-predicted output with the expert-generated output
    # we dont expect them to match too well after such little training, but just examine a few
    print("White to move:")
    print(board_from_channels(test_states[0]))
    print("Expert-Generated White Distribution for this state:")
    printActionDistribution(test_labels[0])
    print("Apprentice-Predicted White Distribution for this state:")
    printActionDistribution(predicted_labels[0][0])
    print("hopefully the distributions match")

    print("Black to move:")
    print(board_from_channels(test_states[batch_size]))
    print("Expert-Generated Black Distribution for this state:")
    printActionDistribution(test_labels[batch_size])
    print("Apprentice-Predicted White Distribution for this state:")
    printActionDistribution(predicted_labels[1][0])
    print("hopefully the distributions match")


    shutil.rmtree("test_multiple_integration")
    end = time.time()
    print("Multiple Integration test passed! Took", end - start, "seconds\n\n")



def main():
    print ("Testing Integration...")
    #testBasicIntegration()
    testMultipleIterations()
    print ("All tests passed!")
    
    
if __name__ == '__main__':
    main()